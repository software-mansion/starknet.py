[tool.poetry]
name = "starknet-py"
version = "0.6.2-alpha"
description = "A python SDK for StarkNet"
authors = ["Tomasz Rejowski <tomasz.rejowski@swmansion.com>", "Jakub Ptak <jakub.ptak@swmansion.com>"]
include = ["starknet_py", "starknet_py/utils/crypto/libcrypto_c_exports.*"]
exclude = ["starknet_py/tests/*", "starknet_py/**/*_test.py", "starknet_py/utils/compiler/mock-contracts/**"]
packages = [
    { include = "starknet_py" }
]
license = "MIT"
readme = "README.md"
repository = "https://github.com/software-mansion/starknet.py"
documentation = "https://starknetpy.rtfd.io/"

[tool.poetry.dependencies]
python = ">=3.8, <3.10"
asgiref = "^3.4.1"
sphinx = {version = "^4.3.1", optional = true}
enum-tools = {extras = ["sphinx"], version = "0.9.0", optional = true}
crypto-cpp-py = "^1.0.4"
marshmallow = "^3.15.0"
marshmallow-oneofschema = "^3.0.1"
cairo-lang = "0.10.0"
typing-extensions = "^4.3.0"

[tool.poetry.extras]
docs = ["sphinx", "enum-tools"]
eth-tester = ["tester"]

[tool.poetry.group.dev.dependencies]
pytest = "^6.2.5"
black = "^22.3.0"
poethepoet = "^0.11.0"
coverage = "^6.3.0"
pytest-asyncio = "^0.19.0"
sphinx-rtd-theme = "^1.0.0"
pylint = "2.13.5"
setuptools = "^65.3.0"
pytest-mock = "^3.6.1"
pytest-xdist = "^2.5.0"
web3 = {extras=["tester"], version="6.0.0b4"}
pyright = "^1.1.270"
starknet-devnet = "0.3.1"

[tool.poe.tasks]
test = ["test_unit", "test_e2e", "test_docs"]
test_unit.shell = "coverage run -m pytest starknet_py --ignore=starknet_py/tests/e2e"
test_unit.env = { COVERAGE_FILE="unit.coverage" }
test_e2e.shell = """
    coverage run -m pytest starknet_py/tests/e2e --ignore=starknet_py/tests/e2e/docs
"""
test_e2e.env = { COVERAGE_FILE="e2e.coverage", DEVNET_PORT="5001" }
test_e2e_parallel.shell = """
    pytest -n auto --dist loadscope starknet_py/tests/e2e -v --ignore=starknet_py/tests/e2e/docs
"""
test_docs.shell = "coverage run -m pytest starknet_py/tests/e2e/docs"
test_docs.env = { COVERAGE_FILE="docs.coverage", DEVNET_PORT="5003" }
coverage_combine.shell = "coverage combine unit.coverage e2e.coverage docs.coverage"
test_report = [{ shell = "poe coverage_combine" }, { shell = "coverage report" }]
test_html = [
    { shell = "poe coverage_combine" },
    { shell = "coverage html && open ./htmlcov/index.html" }
]
docs_create = { shell = "make -C docs html" }
docs_open = { shell = "open docs/_build/html/index.html" }
lint = "pylint starknet_py"
format = "black starknet_py"
format_check = "black --check starknet_py"
typecheck = "pyright starknet_py"
requirements_check.shell = "poetry export -f requirements.txt --without-hashes --extras docs | cmp - requirements.txt"
ci = ["lint", "format_check", "typecheck", "requirements_check", "test"]

[tool.coverage.run]
source = ["starknet_py"]


[tool.coverage.report]
omit = ["*_test.py", "starknet_py/tests/e2e/*", "starknet_py/utils/docs.py"]
skip_empty = true


[build-system]
requires = [
    "setuptools",
    "wheel",
    "build",
    "Cython",
]

build-backend = "setuptools.build_meta"


[tool.black]
target-version = ["py38"]
extend-exclude = """
crypto-cpp
"""

[tool.pytest.ini_options]
markers = [
    "run_on_testnet: marks test that will only run on testnet (when --net=testnet)",
    "run_on_devnet: marks test that will only run on devnet (when --net=devnet)"
]

[tool.pyright]
include = ["starknet_py/"]
exclude = [
    "**/__pycache__",
    "starknet_py/tests",
    "**/*_test.py",
]
